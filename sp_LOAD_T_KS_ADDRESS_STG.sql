--==================================================================================================
--Author: Farr, C
--Create Date:	2024-03-25  	
--Object Name:	sp_LOAD_T_KS_ADDRESS_STG
--Description:  Loading Address Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE RRCU_STG_DEV.KEYSTONE_CORE.sp_LOAD_T_KS_ADDRESS_STG ()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 
	
	TRUNCATE TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF;
	
	-- REMOVE PK	
	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF DROP PRIMARY KEY;	

	-- Populate STAGING WITH CTE DATA
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF
	(
	SERIAL,
	SOURCEHASH2,
	LAST_FM_DATE, 
	TYPE_SERIAL, 
	ADDRESS_CHANGE_DATE, 
	ADDITIONAL_ADDRESS_LINE, 
	STREET, 
	CITY, 
	STATE, 
	POSTAL_CODE, 
	COUNTRY, 
	COUNTRY_CODE, 
	CARRIER_ROUTE, 
	ADDRESS_FORMAT, 
	LATITUDE, 
	LONGITUDE, 
	ADDRESS_CONFIRMATION_DATE, 
	ADDRESS_CONFIRMATION_OPTION
	)
	
	WITH CTE AS

	(	
	SELECT 
	SERIAL,
	MD5(TO_VARCHAR(ARRAY_CONSTRUCT(*))) AS SourceHash2,  -- SOURCE HASH		
	LAST_FM_DATE, 
	TYPE_SERIAL, 
	ADDRESS_CHANGE_DATE, 
	ADDITIONAL_ADDRESS_LINE, 
	STREET, 
	CITY, 
	STATE, 
	POSTAL_CODE, 
	COUNTRY, 
	COUNTRY_CODE, 
	CARRIER_ROUTE, 
	ADDRESS_FORMAT, 
	LATITUDE, 
	LONGITUDE, 
	ADDRESS_CONFIRMATION_DATE, 
	ADDRESS_CONFIRMATION_OPTION,
	ROW_NUMBER() OVER (PARTITION BY SERIAL ORDER BY SERIAL) AS rn -- helps identify mutliple serial number dupes		
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG
	)

    SELECT SERIAL, SOURCEHASH2, LAST_FM_DATE, TYPE_SERIAL, ADDRESS_CHANGE_DATE, ADDITIONAL_ADDRESS_LINE, STREET, CITY, STATE, POSTAL_CODE, COUNTRY, 
	COUNTRY_CODE, CARRIER_ROUTE, ADDRESS_FORMAT, LATITUDE, LONGITUDE, ADDRESS_CONFIRMATION_DATE, ADDRESS_CONFIRMATION_OPTION
	FROM CTE
	WHERE rn = 1;

	-- DUPE CHECK / DELETE 
	DELETE FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF USING (
    	WITH CTE_DUP AS
    	(
    	SELECT SERIAL,
	 	ROW_NUMBER () OVER ( PARTITION BY SERIAL ORDER BY SERIAL) AS RN
	 	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF
    	)
        SELECT SERIAL, RN FROM CTE_DUP
        ) AS CTE_RESULT
	WHERE CTE_RESULT.RN > 1;

	-- ADD PRIMARY KEY BACK

	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF ADD PRIMARY KEY (SERIAL);

	-- Expiration for records not coming back into resultset
	UPDATE RRCU_DW_DEV.DW.T_KS_ADDRESS_DW_CF
	SET ADDR_CURR_IND = 0
	, ADDR_EXP_DT = CURRENT_DATE
	WHERE ADDR_CURR_IND = 1
	AND ADDR_SERIAL NOT IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF);

	DROP TABLE IF EXISTS RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;

	CREATE TEMPORARY TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG(
	ADDR_REC_KEY BIGINT,
	STG_SOURCEHASH2 VARCHAR(32),
	NEW_SOURCEHASH2 VARCHAR(32),
	IS_TYPE2 INT,  -- REPRESENTS TYPE 2
	IS_NEW INT -- INDICATION FOR NEW RECORD TYPE 2
	);

	--DROP TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;
	
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.Update_STG (
	ADDR_REC_KEY,
	STG_SOURCEHASH2,
	NEW_SOURCEHASH2,
	IS_NEW,
	IS_TYPE2	
	)
	
	WITH CTE_COMPARE AS
	(
	SELECT dim.ADDR_REC_KEY ,  dim.ADDR_SOURCEHASH2, stg.sourcehash2,
	CASE WHEN dim.ADDR_REC_KEY IS NULL THEN 1 ELSE 0 END CASE,
	CASE WHEN dim.ADDR_REC_KEY IS NOT NULL AND stg.SOURCEHASH2 <> dim.ADDR_SOURCEHASH2 THEN 1 ELSE 0 END CASE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF stg
	LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_ADDRESS_DW_CF dim ON dim.ADDR_SERIAL = stg.SERIAL AND dim.ADDR_CURR_IND  = 1
	)
	SELECT *
	FROM CTE_COMPARE;

	--SELECT * FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;
	--SELECT * FROM RRCU_STG_DEV.KEYSTONE_CORE..T_KS_ADDRESS_STG_CF;

	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF a
	SET ADDR_REC_KEY = b.ADDR_REC_KEY,
	ISNEW = b.IS_NEW,
	ISTYPE2 = b.IS_TYPE2
	FROM (SELECT ADDR_REC_KEY, IS_NEW, IS_TYPE2, NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG) b
	WHERE a.SOURCEHASH2 = b.NEW_SOURCEHASH2 AND a.ADDR_REC_KEY IS NULL;

   -- Expiration for records type 2
	
    UPDATE RRCU_DW_DEV.DW.T_KS_ADDRESS_DW_CF
	SET ADDR_CURR_IND = 0
	, ADDR_EXP_DT = CURRENT_DATE
	WHERE ADDR_CURR_IND = 1
	AND ADDR_SERIAL IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF WHERE ISTYPE2 = 1); 

	INSERT INTO RRCU_DW_DEV.DW.T_KS_ADDRESS_DW_CF
	(
	ADDR_SERIAL,
	ADDR_CURR_IND, 
	ADDR_EFF_DT, 
	ADDR_EXP_DT, 
	--ADDR_MOD_DT, 
	ADDR_SOURCEHASH2, 
	ADDR_LAST_FM_DATE, 
	ADDR_TYPE_SERIAL, 
	ADDR_ADDRESS_CHANGE_DATE, 
	ADDR_ADDITIONAL_ADDRESS_LINE, 
	ADDR_STREET, 
	ADDR_CITY, 
	ADDR_STATE,
	ADDR_POSTAL_CODE, 
	ADDR_COUNTRY, 
	ADDR_COUNTRY_CODE, 
	ADDR_CARRIER_ROUTE, 
	ADDR_ADDRESS_FORMAT,
	ADDR_LATITUDE, 
	ADDR_LONGITUDE, 
	ADDR_ADDRESS_CONFIRMATION_DATE, 
	ADDR_ADDRESS_CONFIRMATION_OPTION, 
	DW_LOAD_DT
	)
	
	SELECT 
	stg.SERIAL,
	1,
	CURRENT_DATE,
	NULL,
	stg.SOURCEHASH2,
	stg.LAST_FM_DATE, 
	stg.TYPE_SERIAL, 
	stg.ADDRESS_CHANGE_DATE, 
	stg.ADDITIONAL_ADDRESS_LINE, 
	stg.STREET, 
	stg.CITY, 
	stg.STATE, 
	stg.POSTAL_CODE, 
	stg.COUNTRY, 
	stg.COUNTRY_CODE, 
	stg.CARRIER_ROUTE, 
	stg.ADDRESS_FORMAT, 
	stg.LATITUDE, 
	stg.LONGITUDE, 
	stg.ADDRESS_CONFIRMATION_DATE, 
	stg.ADDRESS_CONFIRMATION_OPTION,
	CURRENT_DATE 
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_ADDRESS_STG_CF stg
		WHERE ISNEW = 1 OR ISTYPE2 = 1;
	
END;
$$
;
