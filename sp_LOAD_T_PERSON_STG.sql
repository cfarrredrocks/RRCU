--==================================================================================================
--Author: Farr, C
--Create Date:	2024-03-05  	
--Object Name:	sp_LOAD_T_PERSON_STG
--Description:  Loading Person Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE RRCU_STG_DEV.KEYSTONE_CORE.sp_LOAD_T_PERSON_STG ()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 
	
	TRUNCATE TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF;
	
	-- REMOVE PK	
	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF DROP PRIMARY KEY;
	
	-- Populate STAGING WITH CTE DATA


	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF
	(
	 SERIAL, 
	 SOURCEHASH2,
	 HOUSEHOLD_PERSON_SERIAL, 
	 NAICS_SERIAL, 
	 RELATIONSHIP_SERIAL, 
	 TAX_PERSON_SERIAL, 
	 TAX_STATE_SERIAL, 
	 TYPE_SERIAL,
	 TIN,
	 ACCESS_RESTRICTION, 
	 BACKUP_WITHHOLD, 
	 BIRTH_DATE, 
	 CATEGORY, 
	 CHECK_HOLD_LEVEL_SERIAL, 
	 CTR_EXEMPTION, 
	 CTR_EXEMPTION_REVIEW_DATE, 
	 DEATH_DATE, 
	 DEMOGRAPHICS_FURNISHED, 
	 TITLE, 
	 FIRST_NAME, 
	 MIDDLE_NAME, 
	 LAST_NAME, 
	 NICKNAME, 
	 SUFFIX, 
	 GENDER, 
	 HOUSEHOLD_CATEGORY, 
	 HOUSEHOLD_REASSIGNMENT, 
	 IRS_FORM_W8_EXPIRATION_DATE, 
	 IRS_FORM_W9_RECEIVED_DATE, 
	 MARKETING_OPTION, 
	 NOTE_RESTRICTION, 
	 OFAC_LAST_CHECK_DATE, 
	 OFAC_RESTRICTION, 
	 OWNERSHIP_CHANGE_DATE, 
	 RELATIONSHIP_OVR_EFF_DATE, 
	 RELATIONSHIP_OVR_EXP_DATE, 
	 RELATIONSHIP_OVR_SERIAL, 
	 TAX_COUNTRY_CODE, 
	 TAX_REPORTING, 
	 LAST_FM_DATE
	)	
	
	WITH CTE AS

	(
	 SELECT SERIAL, -- NATURAL KEY 	
	 MD5(TO_VARCHAR(ARRAY_CONSTRUCT(*))) AS SourceHash2,  -- SOURCE HASH	 	 
	 HOUSEHOLD_PERSON_SERIAL, 
	 NAICS_SERIAL, 
	 RELATIONSHIP_SERIAL, 
	 TAX_PERSON_SERIAL, 
	 TAX_STATE_SERIAL, 
	 TYPE_SERIAL, 
	 TIN,
	 ACCESS_RESTRICTION, 
	 BACKUP_WITHHOLD, 
	 BIRTH_DATE, 
	 CATEGORY, 
	 CHECK_HOLD_LEVEL_SERIAL, 
	 CTR_EXEMPTION, 
	 CTR_EXEMPTION_REVIEW_DATE, 
	 DEATH_DATE, 
	 DEMOGRAPHICS_FURNISHED, 
	 TITLE, 
	 FIRST_NAME, 
	 MIDDLE_NAME, 
	 LAST_NAME, 
	 NICKNAME, 
	 SUFFIX, 
	 GENDER, 
	 HOUSEHOLD_CATEGORY, 
	 HOUSEHOLD_REASSIGNMENT, 
	 IRS_FORM_W8_EXPIRATION_DATE, 
	 IRS_FORM_W9_RECEIVED_DATE, 
	 MARKETING_OPTION, 
	 NOTE_RESTRICTION, 
	 OFAC_LAST_CHECK_DATE, 
	 OFAC_RESTRICTION, 
	 OWNERSHIP_CHANGE_DATE, 
	 RELATIONSHIP_OVR_EFF_DATE, 
	 RELATIONSHIP_OVR_EXP_DATE, 
	 RELATIONSHIP_OVR_SERIAL, 
	 TAX_COUNTRY_CODE, 
	 TAX_REPORTING, 
	 LAST_FM_DATE,
	 ROW_NUMBER() OVER (PARTITION BY SERIAL ORDER BY SERIAL) AS rn -- helps identify mutliple serial number dupes	
	 FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG
	)

	SELECT SERIAL, SOURCEHASH2, HOUSEHOLD_PERSON_SERIAL, NAICS_SERIAL, RELATIONSHIP_SERIAL, TAX_PERSON_SERIAL, TAX_STATE_SERIAL, TYPE_SERIAL, TIN,
	 ACCESS_RESTRICTION, BACKUP_WITHHOLD, BIRTH_DATE, CATEGORY, CHECK_HOLD_LEVEL_SERIAL, CTR_EXEMPTION, CTR_EXEMPTION_REVIEW_DATE, DEATH_DATE, 
	 DEMOGRAPHICS_FURNISHED, TITLE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, NICKNAME, SUFFIX, GENDER, HOUSEHOLD_CATEGORY, HOUSEHOLD_REASSIGNMENT, 
	 IRS_FORM_W8_EXPIRATION_DATE, IRS_FORM_W9_RECEIVED_DATE, MARKETING_OPTION, NOTE_RESTRICTION, OFAC_LAST_CHECK_DATE, OFAC_RESTRICTION, 
	 OWNERSHIP_CHANGE_DATE, RELATIONSHIP_OVR_EFF_DATE, RELATIONSHIP_OVR_EXP_DATE, RELATIONSHIP_OVR_SERIAL, TAX_COUNTRY_CODE, TAX_REPORTING, 
	 LAST_FM_DATE
	FROM CTE
	WHERE rn = 1;

	-- DUPE CHECK / DELETE 
	DELETE FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF USING (
    	WITH CTE_DUP AS
    	(
    	SELECT SERIAL,
	 	ROW_NUMBER () OVER ( PARTITION BY SERIAL ORDER BY SERIAL) AS RN
	 	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF
    	)
        SELECT SERIAL, RN FROM CTE_DUP
        ) AS CTE_RESULT
	WHERE CTE_RESULT.RN > 1;

	-- ADD PRIMARY KEY BACK

	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF ADD PRIMARY KEY (SERIAL);
	
	-- Expiration for Person Business Rules Death_Date ONLY

	UPDATE RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	SET PSN_CURR_IND = 0,
	PSN_EXP_DT = CURRENT_DATE
	WHERE PSN_DEATH_DATE >= CURRENT_DATE
	AND PSN_EXP_DT IS NULL;

	UPDATE RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	SET PSN_CURR_IND = 0
	, PSN_EXP_DT = CURRENT_DATE
	WHERE PSN_DEATH_DATE IS NOT NULL
	AND PSN_EXP_DT IS NULL;
	
	
	-- Expiration for records not coming back into resultset
	UPDATE RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	SET PSN_CURR_IND = 0
	, PSN_EXP_DT = CURRENT_DATE
	WHERE PSN_CURR_IND = 1
	AND PSN_SERIAL NOT IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF);

	
	--- Expiration per SourceHash
/*
	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF
	SET PSN_REC_KEY = dim.PSN_REC_KEY

	--,stg.ISNEW = CASE WHEN dim.PSN_REC_KEY <> NULL THEN 1 ELSE 0 END CASE
	--, CASE WHEN dim.PSN_REC_KEY <> NULL AND stg.SOURCEHASH2 <> dim.PSN_SOURCEHASH2 THEN 1 ELSE 0 END AS ISTYPE2
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF stg
	LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF dim ON dim.PSN_SERIAL = stg.SERIAL AND dim.PSN_CURR_IND  = 1;

	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF STG
	SET stg.PSN_REC_KEY = CTE_COMPARE.PSN_REC_KEY
*/

	DROP TABLE IF EXISTS RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;

	CREATE TEMPORARY TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG(
	PSN_REC_KEY BIGINT,
	STG_SOURCEHASH2 VARCHAR(32),
	NEW_SOURCEHASH2 VARCHAR(32),
	IS_TYPE2 INT,  -- REPRESENTS TYPE 2
	IS_NEW INT -- INDICATION FOR NEW RECORD TYPE 2
	);
	
	
	--DROP TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;
	
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.Update_STG (
	PSN_REC_KEY,
	STG_SOURCEHASH2,
	NEW_SOURCEHASH2,
	IS_NEW,
	IS_TYPE2	
	)
	
	WITH CTE_COMPARE AS
	(
	SELECT dim.PSN_REC_KEY ,  dim.PSN_SOURCEHASH2, stg.sourcehash2,
	CASE WHEN dim.PSN_REC_KEY IS NULL THEN 1 ELSE 0 END CASE,
	CASE WHEN dim.PSN_REC_KEY IS NOT NULL AND stg.SOURCEHASH2 <> dim.PSN_SOURCEHASH2 THEN 1 ELSE 0 END CASE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF stg
	LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF dim ON dim.PSN_SERIAL = stg.SERIAL AND dim.PSN_CURR_IND  = 1
	)
	SELECT *
	FROM CTE_COMPARE;

	--SELECT * FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;

	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF a
	SET PSN_REC_KEY = b.PSN_REC_KEY,
	ISNEW = b.IS_NEW,
	ISTYPE2 = b.IS_TYPE2
	FROM (SELECT PSN_REC_KEY, IS_NEW, IS_TYPE2, NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG) b
	WHERE a.SOURCEHASH2 = b.NEW_SOURCEHASH2 AND a.PSN_REC_KEY IS NULL;

	
	--SELECT isnew, count(*)
	--FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF
	--WHERE isnew = 1
	--GROUP BY isnew
	--WHERE SOURCEHASH2 IN (SELECT NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG);


-- Expiration for records type 2
	
   UPDATE RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	SET PSN_CURR_IND = 0
	, PSN_EXP_DT = CURRENT_DATE
	WHERE PSN_CURR_IND = 1
	AND PSN_SERIAL IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF WHERE ISTYPE2 = 1); 

	-- INSERT INTO DW
	
	INSERT INTO RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	(
	PSN_SERIAL, 
	PSN_CURR_IND,
	PSN_EFF_DT, 
	PSN_EXP_DT, 
	--PSN_MOD_DT, 
	PSN_SOURCEHASH2, 	
	PSN_HOUSEHOLD_PERSON_SERIAL, 
	PSN_NAICS_SERIAL, 
	PSN_RELATIONSHIP_SERIAL, 
	PSN_TAX_PERSON_SERIAL, 
	PSN_TAX_STATE_SERIAL, 
	PSN_TYPE_SERIAL,
	PSN_TIN,
	PSN_ACCESS_RESTRICTION, 
	PSN_BACKUP_WITHHOLD, 
	PSN_BIRTH_DATE, 
	PSN_CATEGORY, 
	PSN_CHECK_HOLD_LEVEL_SERIAL, 
	PSN_CTR_EXEMPTION, 
	PSN_CTR_EXEMPTION_REVIEW_DATE, 
	PSN_DEATH_DATE, 
	PSN_DEMOGRAPHICS_FURNISHED, 
	PSN_TITLE, 
	PSN_FIRST_NAME, 
	PSN_MIDDLE_NAME, 
	PSN_LAST_NAME, 
	PSN_NICKNAME, 
	PSN_SUFFIX, 
	PSN_GENDER, 
	PSN_HOUSEHOLD_CATEGORY, 
	PSN_HOUSEHOLD_REASSIGNMENT, 
	PSN_IRS_FORM_W8_EXPIRATION_DATE, 
	PSN_IRS_FORM_W9_RECEIVED_DATE, 
	PSN_MARKETING_OPTION, 
	PSN_NOTE_RESTRICTION, 
	PSN_OFAC_LAST_CHECK_DATE, 
	PSN_OFAC_RESTRICTION, 
	PSN_OWNERSHIP_CHANGE_DATE, 
	PSN_RELATIONSHIP_OVR_EFF_DATE, 
	PSN_RELATIONSHIP_OVR_EXP_DATE, 
	PSN_RELATIONSHIP_OVR_SERIAL, 
	PSN_ROW_CHANGE_TIMESTAMP, 
	PSN_TAX_COUNTRY_CODE, 
	PSN_TAX_REPORTING, 
	PSN_LAST_FM_DATE, 
	DW_LOAD_DT	
	)
	
	SELECT
	stg.SERIAL,
	1,
	CURRENT_DATE,
	NULL,
	stg.SOURCEHASH2,
	stg.HOUSEHOLD_PERSON_SERIAL,
	stg.NAICS_SERIAL,
	stg.RELATIONSHIP_SERIAL,
	stg.TAX_PERSON_SERIAL,
	stg.TAX_STATE_SERIAL,
	stg.TYPE_SERIAL,
	stg.TIN,
	stg.ACCESS_RESTRICTION,
	stg.BACKUP_WITHHOLD,
	stg.BIRTH_DATE,
	stg.CATEGORY,
	stg.CHECK_HOLD_LEVEL_SERIAL,
	stg.CTR_EXEMPTION,
	stg.CTR_EXEMPTION_REVIEW_DATE,
	stg.DEATH_DATE,
	stg.DEMOGRAPHICS_FURNISHED,
	stg.TITLE,
	stg.FIRST_NAME,
	stg.MIDDLE_NAME,
	stg.LAST_NAME,
	stg.NICKNAME,
	stg.SUFFIX,
	stg.GENDER,
	stg.HOUSEHOLD_CATEGORY,
	stg.HOUSEHOLD_REASSIGNMENT,
	stg.IRS_FORM_W8_EXPIRATION_DATE,
	stg.IRS_FORM_W9_RECEIVED_DATE,
	stg.MARKETING_OPTION,
	stg.NOTE_RESTRICTION,
	stg.OFAC_LAST_CHECK_DATE,
	stg.OFAC_RESTRICTION,
	stg.OWNERSHIP_CHANGE_DATE,
	stg.RELATIONSHIP_OVR_EFF_DATE,
	stg.RELATIONSHIP_OVR_EXP_DATE,
	stg.RELATIONSHIP_OVR_SERIAL,
	stg.ROW_CHANGE_TIMESTAMP,
	stg.TAX_COUNTRY_CODE,
	stg.TAX_REPORTING,
	stg.LAST_FM_DATE,
	CURRENT_DATE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_PERSON_STG_CF stg
	WHERE ISNEW = 1 OR ISTYPE2 = 1;

	-- Business rules around death date for current records
	UPDATE RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF
	SET PSN_CURR_IND = 0
	, PSN_EXP_DT = CURRENT_DATE
	WHERE PSN_DEATH_DATE IS NOT NULL
	AND PSN_CURR_IND = 1;

END;
$$
;