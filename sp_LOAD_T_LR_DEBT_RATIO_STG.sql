/*
--==================================================================================================
--Author: Farr, C
--Create Date:	2024-04-11  	
--Object Name:	sp_LOAD_T_LR_DEBT_RATIO_STG
--Description:  Loading Loan Debt Ratio Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------
*/

CREATE OR REPLACE PROCEDURE RRCU_STG_DEV.KEYSTONE_CORE.sp_LOAD_T_LR_DEBT_RATIO_STG()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 
	
	TRUNCATE TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF;
	
	-- REMOVE PK	
	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF DROP PRIMARY KEY;
	
	-- Populate STAGING WITH CTE DATA
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF
	(
	SERIAL,
	SOURCEHASH2,
	PARENT_SERIAL, 
	ORDINAL, 
	LAST_FM_DATE, 
	TYPE_SERIAL, 
	RATIO
	)
	
	WITH CTE AS

	(	
	SELECT 
	SERIAL,
	MD5(TO_VARCHAR(ARRAY_CONSTRUCT(*))) AS SourceHash2,  -- SOURCE HASH	
	PARENT_SERIAL, 
	ORDINAL, 
	LAST_FM_DATE, 
	TYPE_SERIAL, 
	RATIO,
	ROW_NUMBER() OVER (PARTITION BY SERIAL ORDER BY SERIAL) AS rn -- helps identify mutliple serial number dupes		
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG
	)

	SELECT SERIAL, SOURCEHASH2, PARENT_SERIAL, ORDINAL, LAST_FM_DATE, TYPE_SERIAL, RATIO
	FROM CTE
	WHERE rn = 1;

-- DUPE CHECK / DELETE 
	DELETE FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF USING (
    	WITH CTE_DUP AS
    	(
    	SELECT SERIAL,
	 	ROW_NUMBER () OVER ( PARTITION BY SERIAL ORDER BY SERIAL) AS RN
	 	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF
    	)
        SELECT SERIAL, RN FROM CTE_DUP
        ) AS CTE_RESULT
	WHERE CTE_RESULT.RN > 1;

	-- ADD PRIMARY KEY BACK

	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF ADD PRIMARY KEY (SERIAL);

	-- Expiration for records not coming back into resultset
	UPDATE RRCU_DW_DEV.DW.T_KS_LR_DEBT_RATIO_DW_CF
	SET LRDR_CURR_IND = 0
	, LRDR_EXP_DT = CURRENT_DATE
	WHERE LRDR_CURR_IND = 1
	AND LRDR_SERIAL NOT IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF);

	DROP TABLE IF EXISTS RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;

	CREATE TEMPORARY TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG(
	LRDR_REC_KEY BIGINT,
	STG_SOURCEHASH2 VARCHAR(32),
	NEW_SOURCEHASH2 VARCHAR(32),
	IS_TYPE2 INT,  -- REPRESENTS TYPE 2
	IS_NEW INT -- INDICATION FOR NEW RECORD TYPE 2
	);


	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.Update_STG (
	LRDR_REC_KEY,
	STG_SOURCEHASH2,
	NEW_SOURCEHASH2,
	IS_NEW,
	IS_TYPE2	
	)
	
	WITH CTE_COMPARE AS
	(
	SELECT dim.LRDR_REC_KEY ,  dim.LRDR_SOURCEHASH2, stg.sourcehash2,
	CASE WHEN dim.LRDR_REC_KEY IS NULL THEN 1 ELSE 0 END CASE,
	CASE WHEN dim.LRDR_REC_KEY IS NOT NULL AND stg.SOURCEHASH2 <> dim.LRDR_SOURCEHASH2 THEN 1 ELSE 0 END CASE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF stg
	LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_LR_DEBT_RATIO_DW_CF dim ON dim.LRDR_SERIAL = stg.SERIAL AND dim.LRDR_CURR_IND  = 1
	)
	SELECT *
	FROM CTE_COMPARE;

	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF a
	SET LRDR_REC_KEY = b.LRDR_REC_KEY,
	ISNEW = b.IS_NEW,
	ISTYPE2 = b.IS_TYPE2
	FROM (SELECT LRDR_REC_KEY, IS_NEW, IS_TYPE2, NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG) b
	WHERE a.SOURCEHASH2 = b.NEW_SOURCEHASH2 AND a.LRDR_REC_KEY IS NULL;

	-- Expiration for records type 2
	
   UPDATE RRCU_DW_DEV.DW.T_KS_LR_DEBT_RATIO_DW_CF
	SET LRDR_CURR_IND = 0
	, LRDR_EXP_DT = CURRENT_DATE
	WHERE LRDR_CURR_IND = 1
	AND LRDR_SERIAL IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF WHERE ISTYPE2 = 1); 

	INSERT INTO RRCU_DW_DEV.DW.T_KS_LR_DEBT_RATIO_DW_CF
	(
	LRDR_SERIAL,
	LRDR_CURR_IND, 
	LRDR_EFF_DT, 
	LRDR_EXP_DT, 
	--LRDR_MOD_DT, 
	LRDR_SOURCEHASH2, 
	LRDR_PARENT_SERIAL, 
	LRDR_ORDINAL, 
	LRDR_LAST_FM_DATE, 
	LRDR_TYPE_SERIAL,
	LRDR_RATIO, 
	DW_LOAD_DT
	)

	SELECT 
	stg.SERIAL,
	1,
	CURRENT_DATE,
	NULL,
	stg.SOURCEHASH2,
	stg.PARENT_SERIAL, 
	stg.ORDINAL, 
	stg.LAST_FM_DATE, 
	stg.TYPE_SERIAL, 
	stg.RATIO,
	CURRENT_DATE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_LR_DEBT_RATIO_STG_CF stg
		WHERE ISNEW = 1 OR ISTYPE2 = 1;


END;
$$
;

