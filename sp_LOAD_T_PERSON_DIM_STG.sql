--==================================================================================================
--Author: Farr, C
--Create Date:	2024-03-11  	
--Object Name:	sp_LOAD_T_PERSON_DIM_STG
--Description:  Loading Person Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE RRCU_DW_DEV.DM.sp_LOAD_T_PERSON_DIM ()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 


TRUNCATE TABLE RRCU_DW_DEV.DM.T_PERSON_DIM_CF;

INSERT INTO RRCU_DW_DEV.DM.T_PERSON_DIM_CF
(SERIAL, 
BEGIN_DT, 
END_DT, 
ROW_CHANGE_TS, 
LAST_FM_DT, 
BIRTH_DT, 
DEATH_DT,
DECEASED_IND,
CATEGORY,
FULL_NAME,
LEX_FULL_NAME,
TITLE, 
FIRST_NAME, 
MIDDLE_NAME, 
LAST_NAME,
SUFFIX,
NICKNAME, 
GENDER, 
MKT_OPTION,
AGE,
AGE_RANGE,
NOTE)


SELECT 
PSN_SERIAL,
--P.SERIAL AS PSN_REC_KEY, 								/* REPLACE SERIAL WITH ETL SEQ # TO CREATE SURROGATE KEYS AND ENFORCE TYPE II SDC */ 
PSN_LAST_FM_DATE AS BEGIN_DT,						/* LAST FM IN KEYSTONE SHOWS THE LAST TIME RECORD CHANGED */ 
NULL AS END_DT,										/* REPLACE WITH DATE THAT RECORD CHANGED AND SET END DATE; IF RECORD HAS NOT CHANGED, LEAVE NULL */  
--(CASE 
--	WHEN PSN_FIRST_NAME IS NULL AND PSN_CATEGORY = 'I' THEN '0'	/* LEGACY INDIVIDUAL ACCOUNTS THAT WERE PREVIOUSLY CHARGED-OFF AND MIGRATED SHOW WITH NO FIRST NAME */ 
--	WHEN PSN_DEATH_DATE IS NOT NULL THEN '0' 		/* DECEASED PERSONS - SHOULD NOT CARRY A CURRENT IND */ 
--	ELSE '1'												/* ALL ELSE SHOULD BE CONSIDERED A CURRENT, LIVING INDIVIDUAL PERSON, TRUST, BENEFICIARY, OR BUSINESS/VENDOR ENTITY */ 
--END) PSN_CURR_IND,  
--PSN_SERIAL AS SERIAL_NUM, 
PSN_ROW_CHANGE_TIMESTAMP AS ROW_CHANGE_TS, 
PSN_LAST_FM_DATE AS LAST_FM_DT, 
PSN_BIRTH_DATE AS BIRTH_DT, 
PSN_DEATH_DATE AS DEATH_DT,
(CASE 
	WHEN PSN_DEATH_DATE IS NOT NULL THEN '1' ELSE '0' 
END) DEATH_IND,
--PSN_FIRST_NAME + ' ' + PSN_MIDDLE_NAME + ' ' PSN_LAST_NAME, --CONCAT THE FIRST, MIDDLE, AND LAST NAMES, SUCH AS CHARLES A FARR
--NULL AS FULL_NAME, 						/* CONCAT THE FIRST, MIDDLE, AND LAST NAMES, SUCH AS FARR, CHARLES A */ 
PSN_CATEGORY AS CATEGORY,
CONCAT(PSN_FIRST_NAME,' ',COALESCE(PSN_MIDDLE_NAME, ''),' ',PSN_LAST_NAME,' ',COALESCE(PSN_SUFFIX, '')),
CONCAT(PSN_LAST_NAME, ' ',COALESCE(PSN_SUFFIX, ''),', ',PSN_FIRST_NAME,' ',COALESCE(PSN_MIDDLE_NAME, '')),
PSN_TITLE AS PSN_TITLE_NM, 
PSN_FIRST_NAME AS PSN_FIRST_NM, 
PSN_MIDDLE_NAME AS PSN_MIDDLE_NM, 
PSN_LAST_NAME AS PSN_LAST_NM, 
PSN_SUFFIX AS PSN_SUFFIX_NM, 
PSN_NICKNAME AS PSN_NICKNAME_NM, 
PSN_GENDER AS PSN_GENDER_CD, 
PSN_MARKETING_OPTION AS PSN_MKTG_OPTION_CD, 
CASE 												/* CALC PERSON AGE AND RANGE BUCKET */ 
	WHEN PSN_DEATH_DATE IS NULL THEN FLOOR(DATEDIFF(DAYS,PSN_BIRTH_DATE,CURRENT_DATE)/365)
	WHEN PSN_DEATH_DATE IS NOT NULL THEN FLOOR(DATEDIFF(DAYS,PSN_BIRTH_DATE, PSN_DEATH_DATE)/365)
END AS PSN_AGE_NUM, 
CASE 
	WHEN PSN_DEATH_DATE IS NOT NULL THEN 'Deceased'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) < 6573 THEN '< 18'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) BETWEEN 6574 AND 9130   THEN '18-24'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) BETWEEN 9131 AND 12783  THEN '25-34'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) BETWEEN 12784 AND 16435 THEN '35-44'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) BETWEEN 16436 AND 20088 THEN '45-54'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) BETWEEN 20089 AND 23740 THEN '55-64'
	WHEN DATEDIFF(DAYS, PSN_BIRTH_DATE, CURRENT_DATE) >= 23741 THEN '65+' 
	ELSE 'UNDEFINED' 
END AS PSN_AGE_RANGE_NM,
NULL AS PSN_NOTE_DSC 					/* SEE MAPPING FOR BUSINESS LOGIC */ 
--CURRENT_DATE() AS DM_LOAD_DT
FROM RRCU_DW_DEV.DW.T_KS_PERSON_DW_CF-- Must be FROM the warehouse
WHERE PSN_CURR_IND = 1;

END;
$$
;

/*
LEFT OUTER JOIN 										-- EXTRACT MAX(ORDINAL) FOR EACH ACCOUNT "PARENT_SERIAL" 
	(SELECT AN.PARENT_SERIAL AS MAXPSERIAL, 
	MAX(AN.ORDINAL) AS MAXORD, 
	UPPER(AN.EXPLANATION) AS MAXEXPL, 
	AN.EXPIRATION_DATE AS MAXEXPDATE 
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_AC_NOTE_STG AN
	GROUP BY PARENT_SERIAL, ORDINAL, EXPLANATION, EXPIRATION_DATE) MAXNOTE ON MAXNOTE.MAXPSERIAL = A.SERIAL 
	
	
	SELECT * FROM RRCU_DW_DEV.DW.T_KS_PE_NOTE_DW
	*/
