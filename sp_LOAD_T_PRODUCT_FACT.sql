--==================================================================================================
--Author: Farr, C
--Create Date:	2024-04-18  	
--Object Name:	sp_LOAD_T_PRODUCT_FACT
--Description:  Loading Product Fact Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE RRCU_DW_DEV.DM.sp_LOAD_T_PRODUCT_FACT()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 


TRUNCATE TABLE RRCU_DW_DEV.DM.TS_PRODUCT_FACT_CF;


INSERT INTO RRCU_DW_DEV.DM.TS_PRODUCT_FACT_CF
(
ACCOUNT_TRIM_NUMBER, 
SERIAL, 
PRODUCT_DSC, 
TYPE_CD, 
CURR_BAL_AMT, 
ORIG_BAL_AMT, 
CERT_BUMP_CNT, 
LAST_PAYMENT_AMT,
PSN_SERIAL,
ACCT_SERIAL,
PRODUCT_KEY,
PG_GRP_TYPE,
PG_SERIAL
)

-- SHARE PRODUCT FACT INFO
SELECT A.ACCOUNT_TRIM_NUMBER, P.SERIAL_NUM , P.DSC, P.TYPE_CD, COALESCE(S.SHAR_BALANCE,0) AS CURR_BAL_AMT, COALESCE(S.SHAR_ORIGINAL_AMOUNT,0) AS ORIG_BAL_AMT,
COALESCE(S.SHAR_CERT_BUMP_COUNT,0) AS CERT_BUMP_CNT, 0 AS LAST_PAYMENT_AMT, PSN.SERIAL AS PSN_SERIAL, A.SERIAL AS ACCT_SERIAL, P.PRODUCT_KEY, PG.CAT_NM AS PG_GRP_TYPE,
PG.SERIAL AS PG_SERIAL
FROM RRCU_DW_DEV.DM.T_PRODUCT_DIM_CF P
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_SHARE_DW_CF S ON P.SERIAL_NUM = S.SHAR_SERIAL AND S.SHAR_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_SH_TYPE_DW_CF ST ON S.SHAR_TYPE_SERIAL = ST.SHTYP_SERIAL  AND ST.SHTYP_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_PRODUCT_GROUP_DIM_CF PG ON ST.SHTYP_CODE = PG.CAT_NM
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_ACCOUNT_DIM_CF A ON S.SHAR_PARENT_SERIAL = A.SERIAL
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_ACCOUNT_DW_CF ADW ON S.SHAR_PARENT_SERIAL = ADW.ACCT_SERIAL AND ADW.ACCT_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_PERSON_DIM_CF PSN ON ADW.ACCT_PRIMARY_PERSON_SERIAL = PSN.SERIAL 
WHERE P.TYPE_CD = 'SH'
--AND A.ACCOUNT_TRIM_NUMBER = '300132'
GROUP BY A.ACCOUNT_TRIM_NUMBER, P.SERIAL_NUM , P.DSC, P.TYPE_CD, S.SHAR_BALANCE, S.SHAR_ORIGINAL_AMOUNT, S.SHAR_CERT_BUMP_COUNT,
PSN.SERIAL, A.SERIAL, P.PRODUCT_KEY, PG.CAT_NM, PG.SERIAL
--ORDER BY SERIAL_NUM, DSC

UNION

-- LOAN PRODUCT FACT INFO
SELECT A.ACCOUNT_TRIM_NUMBER, P.SERIAL_NUM , P.DSC, P.TYPE_CD, COALESCE(S.LOAN_BALANCE,0) AS CURR_BAL_AMT, COALESCE(S.LOAN_ORIGINAL_BALANCE,0) AS ORIG_BAL_AMT,
0 AS CERT_BUMP_CNT, S.LOAN_PAYMENT_AMOUNT as LAST_PAYMENT_AMT, PSN.SERIAL AS PSN_SERIAL, A.SERIAL AS ACCT_SERIAL, P.PRODUCT_KEY, PG.CAT_NM AS PG_GRP_TYPE,
PG.SERIAL AS PG_SERIAL
FROM RRCU_DW_DEV.DM.T_PRODUCT_DIM_CF P
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_LOAN_DW_CF S ON P.SERIAL_NUM = S.LOAN_SERIAL AND S.LOAN_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_LN_TYPE_DW_CF ST ON S.LOAN_TYPE_SERIAL = ST.LNTYP_SERIAL  AND ST.LNTYP_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_PRODUCT_GROUP_DIM_CF PG ON ST.LNTYP_CODE = PG.CAT_NM
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_ACCOUNT_DIM_CF A ON S.LOAN_PARENT_SERIAL = A.SERIAL
LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_ACCOUNT_DW_CF ADW ON S.LOAN_PARENT_SERIAL = ADW.ACCT_SERIAL AND ADW.ACCT_CURR_IND = 1
LEFT OUTER JOIN RRCU_DW_DEV.DM.T_PERSON_DIM_CF PSN ON ADW.ACCT_PRIMARY_PERSON_SERIAL = PSN.SERIAL 
WHERE P.TYPE_CD = 'LN'
--AND A.ACCOUNT_TRIM_NUMBER = '300132'
GROUP BY A.ACCOUNT_TRIM_NUMBER, P.SERIAL_NUM , P.DSC, P.TYPE_CD, S.LOAN_BALANCE, S.LOAN_ORIGINAL_BALANCE, S.LOAN_PAYMENT_AMOUNT,
PSN.SERIAL, A.SERIAL, P.PRODUCT_KEY, PG.CAT_NM, PG.SERIAL
ORDER BY ACCOUNT_TRIM_NUMBER, SERIAL_NUM, DSC;


END;
$$
;


SELECT *
FROM RRCU_DW_DEV.DW.T_KS_SH_TYPE_DW_CF
WHERE SHTYP_CODE IN (SELECT TYPE_CD FROM RRCU_DW_DEV.DM.T_PRODUCT_GROUP_DIM_CF)


SELECT * 
FROM RRCU_DW_DEV.DM.T_PRODUCT_GROUP_DIM_CF

SELECT *
FROM RRCU_DW_DEV.DW.T_KS_SH_TYPE_DW_CF


/*

AGGREGATION

 

PERSON

ACCOUNT

PRODUCT GROUP (CODES)

PRODUCT

FACT



SELECT DT.DT_REC_KEY,PRD.PRD_REC_KEY,PRD.PRD_REC_DURABLE_KEY,PGM.PG_REC_KEY,PGM.PG_REC_DURABLE_KEY,ACCT.ACCT_REC_KEY,ACCT.ACCT_REC_DURABLE_KEY,PSN.PSN_REC_KEY,
PSN.PSN_REC_DURABLE_KEY,MAIN.PF_CURR_BAL_AMT,

(case when FACT_LOOKUP.PF_CURR_BAL_AMT is null then MAIN.PF_CURR_BAL_AMT else nvl(MAIN.PF_CURR_BAL_AMT,0)-FACT_LOOKUP.PF_CURR_BAL_AMT end)  as PF_TRANSACTION_CURR_BAL_AMT,
MAIN.PF_CHARGE_OFF_AMT,(case when FACT_LOOKUP.PF_CHARGE_OFF_AMT is null then MAIN.PF_CHARGE_OFF_AMT else nvl(MAIN.PF_CHARGE_OFF_AMT,0)-FACT_LOOKUP.PF_CHARGE_OFF_AMT end) as PF_TRANSACTION_CHARGE_OFF_AMT,
MAIN.PF_ORIGINAL_BAL_AMT,(case when FACT_LOOKUP.PF_ORIG_BAL_AMT is null then MAIN.PF_ORIGINAL_BAL_AMT else nvl(MAIN.PF_ORIGINAL_BAL_AMT,0)-FACT_LOOKUP.PF_ORIG_BAL_AMT end) as PF_TRANSACTION_ORIG_BAL_AMT,
PF_CERT_BUMP_CNT,PF_LAST_PAYMENT_AMT,current_date as load_dt from (select *  FROM (

SELECT SH.LAST_FM_DATE, SH.SERIAL,SH.PARENT_SERIAL AS ACCT_SERIAL, SH.TYPE_SERIAL,'SHARE' AS PRD_TYPE_CD,COALESCE(SH.BALANCE,0) AS PF_CURR_BAL_AMT,

COALESCE(SH.CHARGE_OFF_AMOUNT,0) AS PF_CHARGE_OFF_AMT,

COALESCE(SH.ORIGINAL_AMOUNT,0) AS PF_ORIGINAL_BAL_AMT, 

COALESCE(SH.CERT_BUMP_COUNT,0) AS PF_CERT_BUMP_CNT,null as PF_LAST_PAYMENT_AMT,rank() over(partition by serial,ID order by ordinal desc )  as rn 
FROM  RRCU_STG_PRD.KEYSTONE_CORE.T_KS_SHARE_STG SH) as  a where rn=1) AS MAIN LEFT JOIN RRCU_DW_PRD.DM.T_DATE_DIM DT ON MAIN.LAST_FM_DATE=DT.DT_CURRENT_DATE

INNER JOIN RRCU_DW_PRD.DM.T_PRODUCT_DIM AS PRD ON PRD.PRD_SERIAL_NUM=MAIN.SERIAL and main.PRD_TYPE_CD=PRD.PRD_TYPE_CD AND PRD.PRD_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DW.T_KS_SH_TYPE_DW AS PGW ON MAIN.TYPE_SERIAL=PGW.SERIAL AND PGW.IS_CURRENT_ROW_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_PRODUCT_GROUP_DIM AS PGM ON PGW.CODE=PGM.PG_TYPE_CD AND PGM.PG_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_ACCOUNT_DIM AS ACCT ON ACCT.ACCT_SERIAL_NUM=MAIN.ACCT_SERIAL AND ACCT.ACCT_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DW.T_KS_ACCOUNT_DW AS ACCTW ON MAIN.ACCT_SERIAL=ACCTW.SERIAL AND ACCTW.IS_CURRENT_ROW_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_PERSON_DIM AS PSN ON ACCTW.PRIMARY_PERSON_SERIAL=PSN.PSN_SERIAL_NUM AND PSN.PSN_CURR_IND=1

left JOIN
(SELECT PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY,PF_CURR_BAL_AMT,PF_CHARGE_OFF_AMT,PF_ORIG_BAL_AMT 
FROM  
(SELECT PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY,PF_CURR_BAL_AMT,PF_CHARGE_OFF_AMT,PF_ORIG_BAL_AMT,
RANK() OVER(PARTITION BY PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY ORDER BY PF_LAST_FM_DATE_KEY DESC ) 
RANK FROM RRCU_DW_PRD.DM.TS_PRODUCT_FACT)   A WHERE RANK=1)  
FACT_LOOKUP ON FACT_LOOKUP.PRD_REC_DURABLE_KEY=PRD.PRD_REC_DURABLE_KEY AND FACT_LOOKUP.ACCT_REC_DURABLE_KEY=ACCT.ACCT_REC_DURABLE_KEY

AND FACT_LOOKUP.PSN_REC_DURABLE_KEY=PSN.PSN_REC_DURABLE_KEY 
WHERE (CASE WHEN FACT_LOOKUP.PRD_REC_DURABLE_KEY IS NOT NULL THEN   
NVL(MAIN.PF_CURR_BAL_AMT,0)<>NVL(FACT_LOOKUP.PF_CURR_BAL_AMT,0) 
OR NVL(MAIN.PF_CHARGE_OFF_AMT,0)<>NVL(FACT_LOOKUP.PF_CHARGE_OFF_AMT,0) 
OR NVL(MAIN.PF_ORIGINAL_BAL_AMT,0)<>NVL(FACT_LOOKUP.PF_ORIG_BAL_AMT,0) 
ELSE true END)=true

/* 

UNION

 

SELECT DT.DT_REC_KEY,PRD.PRD_REC_KEY,PRD.PRD_REC_DURABLE_KEY,PGM.PG_REC_KEY,PGM.PG_REC_DURABLE_KEY,ACCT.ACCT_REC_KEY,ACCT.ACCT_REC_DURABLE_KEY,PSN.PSN_REC_KEY,PSN.PSN_REC_DURABLE_KEY,MAIN.PF_CURR_BAL_AMT,

(case when FACT_LOOKUP.PF_CURR_BAL_AMT is null then MAIN.PF_CURR_BAL_AMT else nvl(MAIN.PF_CURR_BAL_AMT,0)-FACT_LOOKUP.PF_CURR_BAL_AMT end)  as PF_TRANSACTION_CURR_BAL_AMT,MAIN.PF_CHARGE_OFF_AMT,(case when FACT_LOOKUP.PF_CHARGE_OFF_AMT is null then MAIN.PF_CHARGE_OFF_AMT else nvl(MAIN.PF_CHARGE_OFF_AMT,0)-FACT_LOOKUP.PF_CHARGE_OFF_AMT end) as PF_TRANSACTION_CHARGE_OFF_AMT,MAIN.PF_ORIGINAL_BAL_AMT,(case when FACT_LOOKUP.PF_ORIG_BAL_AMT is null then MAIN.PF_ORIGINAL_BAL_AMT else nvl(MAIN.PF_ORIGINAL_BAL_AMT,0)-FACT_LOOKUP.PF_ORIG_BAL_AMT end) as PF_TRANSACTION_ORIG_BAL_AMT,PF_CERT_BUMP_CNT,PF_LAST_PAYMENT_AMT,current_date as load_dt from (select * FROM (

SELECT LN.LAST_FM_DATE, LN.SERIAL,LN.PARENT_SERIAL AS ACCT_SERIAL, LN.TYPE_SERIAL,'LOAN' AS PRD_TYPE_CD,COALESCE(LN.BALANCE,0) AS PF_CURR_BAL_AMT,

COALESCE(LN.CHARGE_OFF_AMOUNT,0) AS PF_CHARGE_OFF_AMT,

COALESCE(LN.ORIGINAL_BALANCE,0) AS PF_ORIGINAL_BAL_AMT, 

0 AS PF_CERT_BUMP_CNT, PAYMENT_AMOUNT as PF_LAST_PAYMENT_AMT,rank() over(partition by serial,ID order by ordinal desc )  as rn FROM  RRCU_STG_PRD.KEYSTONE_CORE.T_KS_LOAN_STG LN) as a where rn=1) AS MAIN LEFT JOIN RRCU_DW_PRD.DM.T_DATE_DIM DT ON MAIN.LAST_FM_DATE=DT.DT_CURRENT_DATE

INNER JOIN RRCU_DW_PRD.DM.T_PRODUCT_DIM AS PRD ON PRD.PRD_SERIAL_NUM=MAIN.SERIAL and main.PRD_TYPE_CD=PRD.PRD_TYPE_CD AND PRD.PRD_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DW.T_KS_LN_TYPE_DW AS PGW ON MAIN.TYPE_SERIAL=PGW.SERIAL AND PGW.IS_CURRENT_ROW_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_PRODUCT_GROUP_DIM AS PGM ON PGW.CODE=PGM.PG_TYPE_CD AND PGM.PG_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_ACCOUNT_DIM AS ACCT ON ACCT.ACCT_SERIAL_NUM=MAIN.ACCT_SERIAL AND ACCT.ACCT_CURR_IND=1

LEFT JOIN RRCU_DW_PRD.DW.T_KS_ACCOUNT_DW AS ACCTW ON MAIN.ACCT_SERIAL=ACCTW.SERIAL AND ACCTW.IS_CURRENT_ROW_IND=1

LEFT JOIN RRCU_DW_PRD.DM.T_PERSON_DIM AS PSN ON ACCTW.PRIMARY_PERSON_SERIAL=PSN.PSN_SERIAL_NUM AND PSN.PSN_CURR_IND=1

left join (SELECT PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY,PF_CURR_BAL_AMT,PF_CHARGE_OFF_AMT,PF_ORIG_BAL_AMT FROM  (SELECT PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY,PF_CURR_BAL_AMT,PF_CHARGE_OFF_AMT,PF_ORIG_BAL_AMT, RANK() OVER(PARTITION BY PRD_REC_DURABLE_KEY,ACCT_REC_DURABLE_KEY,PSN_REC_DURABLE_KEY ORDER BY PF_LAST_FM_DATE_KEY DESC ) RANK FROM RRCU_DW_PRD.DM.TS_PRODUCT_FACT)   A WHERE RANK=1)  FACT_LOOKUP ON FACT_LOOKUP.PRD_REC_DURABLE_KEY=PRD.PRD_REC_DURABLE_KEY AND FACT_LOOKUP.ACCT_REC_DURABLE_KEY=ACCT.ACCT_REC_DURABLE_KEY

AND FACT_LOOKUP.PSN_REC_DURABLE_KEY=PSN.PSN_REC_DURABLE_KEY WHERE (CASE WHEN FACT_LOOKUP.PRD_REC_DURABLE_KEY IS NOT NULL THEN   NVL(MAIN.PF_CURR_BAL_AMT,0)<>NVL(FACT_LOOKUP.PF_CURR_BAL_AMT,0) OR NVL(MAIN.PF_CHARGE_OFF_AMT,0)<>NVL(FACT_LOOKUP.PF_CHARGE_OFF_AMT,0) OR NVL(MAIN.PF_ORIGINAL_BAL_AMT,0)<>NVL(FACT_LOOKUP.PF_ORIG_BAL_AMT,0) ELSE true END)=TRUE


*/