--==================================================================================================
--Author: Farr, C
--Create Date:	2024-03-05  	
--Object Name:	sp_LOAD_T_USER_STG
--Description:  Loading User Data
--***********************************************************************************************************************
--Date			Trello#					ChangedBy						Description 
------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE RRCU_STG_DEV.KEYSTONE_CORE.sp_LOAD_T_USER_STG ()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL

AS
$$

BEGIN 
	
	TRUNCATE TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF;
	
	-- REMOVE PK	
	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF DROP PRIMARY KEY;
	
	-- Populate STAGING WITH CTE DATA
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF
	(
	SERIAL, 
	SOURCEHASH2,
	LAST_FM_DATE,
	USERNAME,
	DOMAIN_NAME,
	CATEGORY,
	RECEIPT_ID,
	AIRES_CODE,
	PERSON_SERIAL,
	LAST_LOGIN_TIME,
	UNSUCCESSFUL_LOGIN_TIME,
	UNSUCCESSFUL_LOGIN_COUNT,
	LOGIN_LOCK,
	LOGIN_CHANNEL_SERIAL,
	ROLE_SERIAL,
	TEST_ROLE_SERIAL,
	SEC_OVR_REQ_NOT_GROUP_SERIAL,
	SEC_OVR_GRANTOR_GROUP_SERIAL,
	SEC_OVR_GRANTOR_NOT_ADDRESSES,
	WARNING_HANDLING,
	HIRE_DATE,
	TERMINATION_DATE,  -- BUSINESS RULE
	JOB_TITLE,
	DEPARTMENT_SERIAL,
	MANAGER_USER_SERIAL,
	PHONE_NUMBER,
	FAX_NUMBER,
	EMAIL_ADDRESS,
	BRANCH_SERIAL,
	NMLSR_ID,
	OUT_OF_OFFICE_MESSAGE,
	OUT_OF_OFFICE_RETURN_TIME,
	PROFILE_IMAGE,
	PROFILE_IMAGE_FORMAT,
	PROFILE_IMAGE_MOD_TIME,
	SIGNATURE_IMAGE,
	SIGNATURE_IMAGE_FORMAT,
	SIGNATURE_IMAGE_MOD_TIME,
	EX_CREDIT_PULL_USER_SERIAL,
	TU_CREDIT_PULL_USER_SERIAL,
	EQ_CREDIT_PULL_USER_SERIAL,
	CS_CREDIT_PULL_USER_SERIAL,
	CS_LOCATION_ID,
	SHARED_BRANCH_TELLER_ID,
	SALES_OPPORTUNITY_OPTION,
	PERSON_VERIFICATION_OPTION,
	PROF_ACCESS_INT_TY_SPECIFY,
	PROF_ACCESS_INT_TY_SERIAL,
	AD_HOC_REP_USERNAME,
	AD_HOC_REP_PASSWORD,
	AD_HOC_REP_DASHBOARD_NAME,
	ACCESS_LOGGING,
	SERVER_USERNAME, 
	SERVER_PASSWORD,
	USER_INTERFACE_SETTINGS,
	AD_HOC_REP_ROLE_LIST,
	NMLSR_STATE,
	NMLSR_EFFECTIVE_DATE,
	NMLSR_EXPIRATION_DATE,
	PERSON_INFO_CHANGE_HISTORY	
	)
	
	WITH CTE AS

	(	
	SELECT 
	SERIAL,
	MD5(TO_VARCHAR(ARRAY_CONSTRUCT(*))) AS SourceHash2,  -- SOURCE HASH	
	LAST_FM_DATE,
	USERNAME,
	DOMAIN_NAME,
	CATEGORY,
	RECEIPT_ID,
	AIRES_CODE,
	PERSON_SERIAL,
	LAST_LOGIN_TIME,
	UNSUCCESSFUL_LOGIN_TIME,
	UNSUCCESSFUL_LOGIN_COUNT,
	LOGIN_LOCK,
	LOGIN_CHANNEL_SERIAL,
	ROLE_SERIAL,
	TEST_ROLE_SERIAL,
	SEC_OVR_REQ_NOT_GROUP_SERIAL,
	SEC_OVR_GRANTOR_GROUP_SERIAL,
	SEC_OVR_GRANTOR_NOT_ADDRESSES,
	WARNING_HANDLING,
	HIRE_DATE,
	TERMINATION_DATE,  -- BUSINESS RULE
	JOB_TITLE,
	DEPARTMENT_SERIAL,
	MANAGER_USER_SERIAL,
	PHONE_NUMBER,
	FAX_NUMBER,
	EMAIL_ADDRESS,
	BRANCH_SERIAL,
	NMLSR_ID,
	OUT_OF_OFFICE_MESSAGE,
	OUT_OF_OFFICE_RETURN_TIME,
	PROFILE_IMAGE,
	PROFILE_IMAGE_FORMAT,
	PROFILE_IMAGE_MOD_TIME,
	SIGNATURE_IMAGE,
	SIGNATURE_IMAGE_FORMAT,
	SIGNATURE_IMAGE_MOD_TIME,
	EX_CREDIT_PULL_USER_SERIAL,
	TU_CREDIT_PULL_USER_SERIAL,
	EQ_CREDIT_PULL_USER_SERIAL,
	CS_CREDIT_PULL_USER_SERIAL,
	CS_LOCATION_ID,
	SHARED_BRANCH_TELLER_ID,
	SALES_OPPORTUNITY_OPTION,
	PERSON_VERIFICATION_OPTION,
	PROF_ACCESS_INT_TY_SPECIFY,
	PROF_ACCESS_INT_TY_SERIAL,
	AD_HOC_REP_USERNAME,
	AD_HOC_REP_PASSWORD,
	AD_HOC_REP_DASHBOARD_NAME,
	ACCESS_LOGGING,
	SERVER_USERNAME, 
	SERVER_PASSWORD,
	USER_INTERFACE_SETTINGS,
	AD_HOC_REP_ROLE_LIST,
	NMLSR_STATE,
	NMLSR_EFFECTIVE_DATE,
	NMLSR_EXPIRATION_DATE,
	PERSON_INFO_CHANGE_HISTORY,	
	ROW_NUMBER() OVER (PARTITION BY SERIAL ORDER BY SERIAL) AS rn -- helps identify mutliple serial number dupes		
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG
	)

	SELECT 	SERIAL, SOURCEHASH2, LAST_FM_DATE, USERNAME, DOMAIN_NAME, CATEGORY,	RECEIPT_ID,	AIRES_CODE,	PERSON_SERIAL, LAST_LOGIN_TIME,	UNSUCCESSFUL_LOGIN_TIME,
	UNSUCCESSFUL_LOGIN_COUNT, LOGIN_LOCK, LOGIN_CHANNEL_SERIAL,	ROLE_SERIAL, TEST_ROLE_SERIAL, SEC_OVR_REQ_NOT_GROUP_SERIAL, SEC_OVR_GRANTOR_GROUP_SERIAL,
	SEC_OVR_GRANTOR_NOT_ADDRESSES, WARNING_HANDLING, HIRE_DATE, TERMINATION_DATE, JOB_TITLE, DEPARTMENT_SERIAL, MANAGER_USER_SERIAL, PHONE_NUMBER,
	FAX_NUMBER, EMAIL_ADDRESS, BRANCH_SERIAL, NMLSR_ID, OUT_OF_OFFICE_MESSAGE, OUT_OF_OFFICE_RETURN_TIME, PROFILE_IMAGE, PROFILE_IMAGE_FORMAT, PROFILE_IMAGE_MOD_TIME,
	SIGNATURE_IMAGE, SIGNATURE_IMAGE_FORMAT, SIGNATURE_IMAGE_MOD_TIME, EX_CREDIT_PULL_USER_SERIAL, TU_CREDIT_PULL_USER_SERIAL, 	EQ_CREDIT_PULL_USER_SERIAL,
	CS_CREDIT_PULL_USER_SERIAL, CS_LOCATION_ID, SHARED_BRANCH_TELLER_ID, SALES_OPPORTUNITY_OPTION, PERSON_VERIFICATION_OPTION, PROF_ACCESS_INT_TY_SPECIFY,
	PROF_ACCESS_INT_TY_SERIAL, AD_HOC_REP_USERNAME, AD_HOC_REP_PASSWORD, AD_HOC_REP_DASHBOARD_NAME, ACCESS_LOGGING, SERVER_USERNAME, SERVER_PASSWORD,
	USER_INTERFACE_SETTINGS, AD_HOC_REP_ROLE_LIST, NMLSR_STATE, NMLSR_EFFECTIVE_DATE, NMLSR_EXPIRATION_DATE, PERSON_INFO_CHANGE_HISTORY	
	FROM CTE
	WHERE rn = 1;
	
	-- DUPE CHECK / DELETE 
	DELETE FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF USING (
    	WITH CTE_DUP AS
    	(
    	SELECT SERIAL,
	 	ROW_NUMBER () OVER ( PARTITION BY SERIAL ORDER BY SERIAL) AS RN
	 	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF
    	)
        SELECT SERIAL, RN FROM CTE_DUP
        ) AS CTE_RESULT
	WHERE CTE_RESULT.RN > 1;
	
	-- ADD PRIMARY KEY BACK

	ALTER TABLE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF ADD PRIMARY KEY (SERIAL);

	-- Expiration for Person Business Rules Death_Date ONLY

	UPDATE RRCU_DW_DEV.DW.T_KS_USER_DW_CF
	SET USER_CURR_IND = 0,
	USER_EXP_DT = CURRENT_DATE
	WHERE USER_TERMINATION_DATE IS NOT NULL
	AND USER_EXP_DT IS NULL;	
	
	-- Expiration for records not coming back into resultset
	UPDATE RRCU_DW_DEV.DW.T_KS_USER_DW_CF
	SET USER_CURR_IND = 0
	, USER_EXP_DT = CURRENT_DATE
	WHERE USER_CURR_IND = 1
	AND USER_SERIAL NOT IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF);

	DROP TABLE IF EXISTS RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;
	
	CREATE TEMPORARY TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG(
	USER_REC_KEY BIGINT,
	STG_SOURCEHASH2 VARCHAR(32),
	NEW_SOURCEHASH2 VARCHAR(32),
	IS_TYPE2 INT,  -- REPRESENTS TYPE 2
	IS_NEW INT -- INDICATION FOR NEW RECORD TYPE 2
	);

	--DROP TABLE RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;
	
	INSERT INTO RRCU_STG_DEV.KEYSTONE_CORE.Update_STG (
	USER_REC_KEY,
	STG_SOURCEHASH2,
	NEW_SOURCEHASH2,
	IS_NEW,
	IS_TYPE2	
	)
	
	WITH CTE_COMPARE AS
	(
	SELECT dim.USER_REC_KEY ,  dim.USER_SOURCEHASH2, stg.sourcehash2,
	CASE WHEN dim.USER_REC_KEY IS NULL THEN 1 ELSE 0 END CASE,
	CASE WHEN dim.USER_REC_KEY IS NOT NULL AND stg.SOURCEHASH2 <> dim.USER_SOURCEHASH2 THEN 1 ELSE 0 END CASE
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF stg
	LEFT OUTER JOIN RRCU_DW_DEV.DW.T_KS_USER_DW_CF dim ON dim.USER_SERIAL = stg.SERIAL AND dim.USER_CURR_IND  = 1
	)
	SELECT *
	FROM CTE_COMPARE;

	--SELECT * FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG;

	UPDATE RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF a
	SET USER_REC_KEY = b.USER_REC_KEY,
	ISNEW = b.IS_NEW,
	ISTYPE2 = b.IS_TYPE2
	FROM (SELECT USER_REC_KEY, IS_NEW, IS_TYPE2, NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG) b
	WHERE a.SOURCEHASH2 = b.NEW_SOURCEHASH2 AND a.USER_REC_KEY IS NULL;

	--SELECT isnew, count(*)
	--FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF
	--WHERE isnew = 1
	--GROUP BY isnew
	--WHERE SOURCEHASH2 IN (SELECT NEW_SOURCEHASH2 FROM RRCU_STG_DEV.KEYSTONE_CORE.Update_STG);

   -- Expiration for records type 2
	
   UPDATE RRCU_DW_DEV.DW.T_KS_USER_DW_CF
	SET USER_CURR_IND = 0
	, USER_EXP_DT = CURRENT_DATE
	WHERE USER_CURR_IND = 1
	AND USER_SERIAL IN (SELECT SERIAL FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF WHERE ISTYPE2 = 1); 

	INSERT INTO RRCU_DW_DEV.DW.T_KS_USER_DW_CF
	(
	USER_SERIAL,
	USER_CURR_IND, 
	USER_EFF_DT, 
	USER_EXP_DT, 
	--USER_MOD_DT,
	USER_SOURCEHASH2,
	USER_LAST_FM_DATE, 
	USER_USERNAME, 
	USER_DOMAIN_NAME,
	USER_CATEGORY,
	USER_RECEIPT_ID, 
	USER_AIRES_CODE, 
	USER_PERSON_SERIAL, 
	USER_LAST_LOGIN_TIME, 
	USER_UNSUCCESSFUL_LOGIN_TIME, 
	USER_UNSUCCESSFUL_LOGIN_COUNT, 
	USER_LOGIN_LOCK, 
	USER_LOGIN_CHANNEL_SERIAL, 
	USER_ROLE_SERIAL, 
	USER_TEST_ROLE_SERIAL, 
	USER_SEC_OVR_REQ_NOT_GROUP_SERIAL, 
	USER_SEC_OVR_GRANTOR_GROUP_SERIAL, 
	USER_SEC_OVR_GRANTOR_NOT_ADDRESSES, 
	USER_WARNING_HANDLING, 
	USER_HIRE_DATE, 
	USER_TERMINATION_DATE, 
	USER_JOB_TITLE,
	USER_DEPARTMENT_SERIAL, 
	USER_MANAGER_USER_SERIAL, 
	USER_PHONE_NUMBER, 
	USER_FAX_NUMBER, 
	USER_EMAIL_ADDRESS, 
	USER_BRANCH_SERIAL,
	USER_NMLSR_ID, 
	USER_OUT_OF_OFFICE_MESSAGE, 
	USER_OUT_OF_OFFICE_RETURN_TIME, 
	USER_PROFILE_IMAGE, 
	USER_PROFILE_IMAGE_FORMAT, 
	USER_PROFILE_IMAGE_MOD_TIME, 
	USER_SIGNATURE_IMAGE, 
	USER_SIGNATURE_IMAGE_FORMAT, 
	USER_SIGNATURE_IMAGE_MOD_TIME, 
	USER_EX_CREDIT_PULL_USER_SERIAL, 
	USER_TU_CREDIT_PULL_USER_SERIAL, 
	USER_EQ_CREDIT_PULL_USER_SERIAL, 
	USER_CS_CREDIT_PULL_USER_SERIAL, 
	USER_CS_LOCATION_ID, 
	USER_SHARED_BRANCH_TELLER_ID, 
	USER_SALES_OPPORTUNITY_OPTION, 
	USER_PERSON_VERIFICATION_OPTION, 
	USER_PROF_ACCESS_INT_TY_SPECIFY,
	USER_PROF_ACCESS_INT_TY_SERIAL,
	USER_AD_HOC_REP_USERNAME, 
	USER_AD_HOC_REP_PASSWORD, 
	USER_AD_HOC_REP_DASHBOARD_NAME, 
	USER_ACCESS_LOGGING, 
	USER_SERVER_USERNAME, 
	USER_SERVER_PASSWORD, 
	USER_INTERFACE_SETTINGS, 
	USER_AD_HOC_REP_ROLE_LIST
	)
	
	SELECT 
	stg.SERIAL,
	1,
	CURRENT_DATE,
	NULL,
	stg.SOURCEHASH2,
 	stg.LAST_FM_DATE,
	stg.USERNAME, 
	stg.DOMAIN_NAME, 
	stg.CATEGORY, 
	stg.RECEIPT_ID, 
	stg.AIRES_CODE, 
	stg.PERSON_SERIAL, 
	stg.LAST_LOGIN_TIME, 
	stg.UNSUCCESSFUL_LOGIN_TIME, 
	stg.UNSUCCESSFUL_LOGIN_COUNT, 
	stg.LOGIN_LOCK, 
	stg.LOGIN_CHANNEL_SERIAL, 
	stg.ROLE_SERIAL, 
	stg.TEST_ROLE_SERIAL, 
	stg.SEC_OVR_REQ_NOT_GROUP_SERIAL, 
	stg.SEC_OVR_GRANTOR_GROUP_SERIAL, 
	stg.SEC_OVR_GRANTOR_NOT_ADDRESSES, 
	stg.WARNING_HANDLING,
	stg.HIRE_DATE, 
	stg.TERMINATION_DATE, 
	stg.JOB_TITLE, 
	stg.DEPARTMENT_SERIAL,
	stg.MANAGER_USER_SERIAL, 
	stg.PHONE_NUMBER, 
	stg.FAX_NUMBER, 
	stg.EMAIL_ADDRESS, 
	stg.BRANCH_SERIAL,
	stg.NMLSR_ID, 
	stg.OUT_OF_OFFICE_MESSAGE, 
	stg.OUT_OF_OFFICE_RETURN_TIME, 
	stg.PROFILE_IMAGE, 
	stg.PROFILE_IMAGE_FORMAT, 
	stg.PROFILE_IMAGE_MOD_TIME, 
	stg.SIGNATURE_IMAGE, 
	stg.SIGNATURE_IMAGE_FORMAT, 
	stg.SIGNATURE_IMAGE_MOD_TIME, 
	stg.EX_CREDIT_PULL_USER_SERIAL, 
	stg.TU_CREDIT_PULL_USER_SERIAL, 
	stg.EQ_CREDIT_PULL_USER_SERIAL, 
	stg.CS_CREDIT_PULL_USER_SERIAL, 
	stg.CS_LOCATION_ID, 
	stg.SHARED_BRANCH_TELLER_ID, 
	stg.SALES_OPPORTUNITY_OPTION, 
	stg.PERSON_VERIFICATION_OPTION, 
	stg.PROF_ACCESS_INT_TY_SPECIFY, 
	stg.PROF_ACCESS_INT_TY_SERIAL, 
	stg.AD_HOC_REP_USERNAME, 
	stg.AD_HOC_REP_PASSWORD, 
	stg.AD_HOC_REP_DASHBOARD_NAME, 
	stg.ACCESS_LOGGING, 
	stg.SERVER_USERNAME, 
	stg.SERVER_PASSWORD, 
	stg.USER_INTERFACE_SETTINGS, 
	stg.AD_HOC_REP_ROLE_LIST
	FROM RRCU_STG_DEV.KEYSTONE_CORE.T_KS_USER_STG_CF stg
		WHERE ISNEW = 1 OR ISTYPE2 = 1;
	
	-- Business rules around death date for current records
	UPDATE RRCU_DW_DEV.DW.T_KS_USER_DW_CF
	SET USER_CURR_IND = 0,
	USER_EXP_DT = CURRENT_DATE
	WHERE USER_TERMINATION_DATE IS NOT NULL
	AND USER_EXP_DT IS NULL;	

END;
$$
;